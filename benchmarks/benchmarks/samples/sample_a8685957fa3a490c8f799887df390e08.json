{
    "title": "Add parse_llm_response",
    "description": "",
    "id": "a8685957fa3a490c8f799887df390e08",
    "parent_id": "",
    "repo": "https://github.com/AbanteAI/mentat",
    "merge_base": "4002e1819f7d55013f093e7022c888e331d69e9c",
    "diff_merge_base": "",
    "diff_active": "diff --git a/mentat/parsers/parser.py b/mentat/parsers/parser.py\nindex 6466eeb..2dbe594 100644\n--- a/mentat/parsers/parser.py\n+++ b/mentat/parsers/parser.py\n@@ -30,2 +30,3 @@ from mentat.session_context import SESSION_CONTEXT\n from mentat.streaming_printer import StreamingPrinter\n+from mentat.streaming_printer import DummyPrinter\n \n@@ -44,2 +45,3 @@ class Parser(ABC):\n         self._interrupt_task = None\n+        self._silence_printer = False\n \n@@ -88,4 +90,8 @@ class Parser(ABC):\n \n-        printer = StreamingPrinter()\n-        printer_task = asyncio.create_task(printer.print_lines())\n+        if self._silence_printer:\n+            printer = DummyPrinter()\n+            printer_task = None\n+        else:\n+            printer = StreamingPrinter()\n+            printer_task = asyncio.create_task(printer.print_lines())\n         message = \"\"\n@@ -110,3 +116,4 @@ class Parser(ABC):\n                 printer.shutdown_printer()\n-                await printer_task\n+                if printer_task is not None:\n+                    await printer_task\n                 stream.send(\n@@ -206,3 +213,4 @@ class Parser(ABC):\n                             printer.wrap_it_up()\n-                            await printer_task\n+                            if printer_task is not None:\n+                                await printer_task\n                             logging.debug(\"LLM Response:\")\n@@ -315,3 +323,4 @@ class Parser(ABC):\n             printer.wrap_it_up()\n-            await printer_task\n+            if printer_task is not None:\n+                await printer_task\n \ndiff --git a/mentat/streaming_printer.py b/mentat/streaming_printer.py\nindex d910f1a..0ec8629 100644\n--- a/mentat/streaming_printer.py\n+++ b/mentat/streaming_printer.py\n@@ -62 +62,18 @@ class StreamingPrinter:\n         self.shutdown = True\n+\n+\n+class DummyPrinter:\n+    def add_string(self, string: str, end: str = \"\\n\", color: str | None = None):\n+        pass\n+\n+    def sleep_time(self) -> float:\n+        return 0.0\n+\n+    async def print_lines(self):\n+        pass\n+\n+    def wrap_it_up(self):\n+        pass\n+\n+    def shutdown_printer(self):\n+        pass\n",
    "message_history": [],
    "message_prompt": "Create a new method on Parser called parse_llm_response, which takes a string called 'response' and returns a `ParsedLLMResponse`. Inside, you're oging to (1) set the `_silence_printer` flag to true, (2) convert `response` into an asynciter using `convert_string_to_asynciter`, (3) get the return value of `stream_and_parse_llm_response`, (4) set the flag back to false, and (5) return the parsed response.",
    "message_edit": "I will add a new method `parse_llm_response` to the `Parser` class in `mentat/parsers/parser.py`. This method will set the `_silence_printer` flag to true, convert the `response` string into an async iterator using `convert_string_to_asynciter` from `mentat/utils.py`, call `stream_and_parse_llm_response` with the async iterator, set the `_silence_printer` flag back to false, and return the parsed response.",
    "context": [
        "mentat/utils.py:55-77",
        "mentat/streaming_printer.py",
        "mentat/parsers/parser.py"
    ],
    "diff_edit": "diff --git a/mentat/parsers/parser.py b/mentat/parsers/parser.py\nindex 2dbe594..1738497 100644\n--- a/mentat/parsers/parser.py\n+++ b/mentat/parsers/parser.py\n@@ -31,2 +31,3 @@ from mentat.streaming_printer import StreamingPrinter\n from mentat.streaming_printer import DummyPrinter\n+from mentat.utils import convert_string_to_asynciter\n \n@@ -430 +431,8 @@ class Parser(ABC):\n         raise NotImplementedError()\n+    \n+    async def parse_llm_response(self, response: str) -> ParsedLLMResponse:\n+        self._silence_printer = True\n+        async_iter_response = convert_string_to_asynciter(response, chunk_size=100)\n+        parsed_response = await self.stream_and_parse_llm_response(async_iter_response)\n+        self._silence_printer = False\n+        return parsed_response\n",
    "test_command": "",
    "version": "0.1.0"
}