{
    "title": "Deactivate sampler if SampleError raised",
    "description": "",
    "id": "c9604403795642e1a01b5177eb10c539",
    "parent_id": "",
    "repo": "https://github.com/AbanteAI/mentat",
    "merge_base": "9498bdde0dcdeafcaaac6ab148bdb599f3d7548c",
    "diff_merge_base": "",
    "diff_active": "",
    "message_history": [],
    "message_prompt": "Add a new attribute to Sampler called 'active: bool = True'. In Session, add a check that active is True before calling set_active_diff, and wrap that call in a try block; except a SampleError, print it to the stream and set active to false.",
    "message_edit": "I will add the new attribute `active` to the `Sampler` class and modify the `Session` class to include the check for `active` being `True` before calling `set_active_diff`. Additionally, I will wrap the call to `set_active_diff` in a try-except block to handle `SampleError`.\n\nSteps:\n1. Add the `active` attribute to the `Sampler` class with a default value of `True`.\n2. Modify the `Session` class to check if `sampler.active` is `True` before calling `set_active_diff`.\n3. Wrap the call to `set_active_diff` in a try-except block to catch `SampleError`.\n4. If a `SampleError` is caught, print the error to the stream and set `sampler.active` to `False`.",
    "context": [
        "mentat/session.py",
        "mentat/sampler/sampler.py",
        "mentat/errors.py"
    ],
    "diff_edit": "diff --git a/mentat/sampler/sampler.py b/mentat/sampler/sampler.py\nindex eed7a8c..ced20cc 100644\n--- a/mentat/sampler/sampler.py\n+++ b/mentat/sampler/sampler.py\n@@ -51,2 +51,3 @@ class Sampler:\n     last_sample_hexsha: str | None = None\n+    active: bool = True\n \ndiff --git a/mentat/session.py b/mentat/session.py\nindex 149343a..1687ac5 100644\n--- a/mentat/session.py\n+++ b/mentat/session.py\n@@ -22,3 +22,9 @@ from mentat.cost_tracker import CostTracker\n from mentat.ctags import ensure_ctags_installed\n-from mentat.errors import ContextSizeInsufficient, MentatError, SessionExit, UserError\n+from mentat.errors import (\n+    ContextSizeInsufficient, \n+    MentatError, \n+    SampleError, \n+    SessionExit, \n+    UserError,\n+)\n from mentat.git_handler import get_git_root_for_path\n@@ -181,4 +187,8 @@ class Session:\n \n-                    if session_context.sampler:\n-                        session_context.sampler.set_active_diff()\n+                    if session_context.sampler and session_context.sampler.active:\n+                        try:\n+                            session_context.sampler.set_active_diff()\n+                        except SampleError as e:\n+                            stream.send(f\"Sample error: {e}\", color=\"red\")\n+                            session_context.sampler.active = False\n \n",
    "test_command": "",
    "version": "0.1.0"
}