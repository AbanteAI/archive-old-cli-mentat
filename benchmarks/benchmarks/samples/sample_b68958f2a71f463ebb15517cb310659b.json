{
    "title": "Explain get_code_message between two files",
    "description": "",
    "id": "b68958f2a71f463ebb15517cb310659b",
    "parent_id": "",
    "repo": "https://github.com/AbanteAI/mentat",
    "merge_base": "9498bdde0dcdeafcaaac6ab148bdb599f3d7548c",
    "diff_merge_base": "",
    "diff_active": "",
    "message_history": [],
    "message_prompt": "How does get_code_message work? Explain the what happens between these two files/classes to generate the code message. Be concise - just 6-8 bullet points",
    "message_edit": "- `get_code_message` in `CodeContext` class retrieves the current code message, which is a string representation of the code context to be sent to the language model.\n- It calculates the number of tokens used by the prompt and included features to ensure the code message does not exceed the model's context size.\n- If auto-context is enabled and the prompt is provided, it filters relevant features using a filter (e.g., `DefaultFilter`) based on the remaining token budget.\n- The method `get_code_message_from_features` from `code_feature.py` is called to generate the code message from the included features and auto-included features.\n- `get_code_message_from_features` organizes features by file path and merges overlapping intervals within the same file to create a coherent code message.\n- Each `CodeFeature` object has a `get_code_message` method that formats its associated code snippet into a list of strings, including the file name and line numbers if needed.\n- If a diff context is available and the feature's file is part of the diff, the feature's code message is annotated with diff information using methods from `diff_context.py`.\n- The resulting list of strings from all features is joined into a single string, which is the code message returned by `get_code_message` in `CodeContext`.",
    "context": [
        "mentat/code_context.py",
        "mentat/code_feature.py"
    ],
    "diff_edit": "",
    "test_command": "",
    "version": "0.1.0"
}
