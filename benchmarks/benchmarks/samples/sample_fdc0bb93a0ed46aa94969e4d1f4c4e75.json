{
    "title": "parser_map returns a class, not an instance",
    "description": "",
    "id": "fdc0bb93a0ed46aa94969e4d1f4c4e75",
    "parent_id": "",
    "repo": "https://github.com/AbanteAI/mentat",
    "merge_base": "6deda27",
    "diff_merge_base": "diff --git a/scripts/evaluate_samples.py b/scripts/evaluate_samples.py\nindex 6ecb35f..507cae5 100644\n--- a/scripts/evaluate_samples.py\n+++ b/scripts/evaluate_samples.py\n@@ -24,2 +24,7 @@ from mentat.session_context import SESSION_CONTEXT\n from mentat.utils import clone_repo, mentat_dir_path\n+from tests.benchmarks.benchmark_runner import (\n+    grade_diff_syntax,\n+    grade_model_response,\n+    compare_diffs,\n+)\n \n@@ -125,2 +130,3 @@ async def main():\n \n+    results = {}\n     for sample_file in sample_files:\n@@ -128,4 +134,13 @@ async def main():\n             sample = Sample.load(sample_file)\n-            results = await evaluate_sample(sample)\n-            print(f\"Results for {sample_file.stem}: {json.dumps(results, indent=4)}\")\n+            print(f\"Evaluating sample {sample.id[:8]}\")\n+            print(f\"  Prompt: {sample.message_prompt}\")\n+            diff_eval = await evaluate_sample(sample)\n+            message_eval = \"\"  # TODO: return from evaluate_sample\n+            \n+            diff_grade = await grade_diff_syntax(diff_eval)\n+            print(f\"  Diff Grade: {diff_grade}\")\n+            response_grade = await grade_model_response(message_eval + \"\\n\" + diff_eval)\n+            print(f\"  Response Grade: {response_grade}\")\n+            comparison_grade = await compare_diffs(sample.diff_edit, diff_eval)\n+            print(f\"  Comparison Grade: {comparison_grade}\")\n         else:\n",
    "diff_active": "",
    "message_history": [],
    "message_prompt": "Change parser_map so that it returns the class, not an instance of the class, and update all the places where it's called to add a '()' afterwards.",
    "message_edit": "I will update the `parser_map` in `mentat/parsers/parser_map.py` to return the class instead of an instance. Then, I will modify all the places where `parser_map` is called in `mentat/config.py` and `scripts/translate_transcript.py` to instantiate the class by adding `()` after the `parser_map` call.\n\nSteps:\n1. Update `parser_map` to return the class instead of an instance.\n2. Update `Config` class in `mentat/config.py` where `parser_map.get` is used as a converter.\n3. Update `translate_transcript.py` where `parser_map` is used to get the starting and ending parsers.",
    "context": [
        "mentat/config.py",
        "scripts/translate_transcript.py",
        "mentat/parsers/parser_map.py"
    ],
    "diff_edit": "diff --git a/mentat/config.py b/mentat/config.py\nindex b0cb490..d0b042a 100644\n--- a/mentat/config.py\n+++ b/mentat/config.py\n@@ -85,3 +85,3 @@ class Config:\n         },\n-        converter=parser_map.get,  # pyright: ignore\n+        converter=lambda name: parser_map.get(name)(),  # pyright: ignore\n         validator=validators.instance_of(Parser),  # pyright: ignore\ndiff --git a/mentat/parsers/parser_map.py b/mentat/parsers/parser_map.py\nindex 2ff0777..91e141c 100644\n--- a/mentat/parsers/parser_map.py\n+++ b/mentat/parsers/parser_map.py\n@@ -6,9 +6,9 @@ from mentat.parsers.unified_diff_parser import UnifiedDiffParser\n \n-parser_map: dict[str, Parser] = {\n-    \"block\": BlockParser(),\n-    \"replacement\": ReplacementParser(),\n-    \"unified-diff\": UnifiedDiffParser(),\n+parser_map: dict[str, type[Parser]] = {\n+    \"block\": BlockParser,\n+    \"replacement\": ReplacementParser,\n+    \"unified-diff\": UnifiedDiffParser,\n     # JsonParser is experimental and has no streaming or tests and seems worse than other formats\n     # Don't use it! But if you need to, make sure to set to a model that can use the JSON response_format\n-    \"json\": JsonParser(),\n+    \"json\": JsonParser,\n }\ndiff --git a/scripts/translate_transcript.py b/scripts/translate_transcript.py\nindex e56667a..e82d22c 100755\n--- a/scripts/translate_transcript.py\n+++ b/scripts/translate_transcript.py\n@@ -14,3 +14,3 @@ from mentat.utils import convert_string_to_asynciter\n \n-parser_map[\"git\"] = GitParser()\n+parser_map[\"git\"] = GitParser\n \n@@ -60,4 +60,4 @@ if __name__ == \"__main__\":\n \n-    starting_parser = parser_map[args.starting_format]\n-    ending_parser = parser_map[args.ending_format]\n+    starting_parser = parser_map[args.starting_format]()\n+    ending_parser = parser_map[args.ending_format]()\n     with open(args.transcript, \"r\") as f:\n",
    "test_command": "",
    "version": "0.1.0"
}